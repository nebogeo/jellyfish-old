env = Environment(CCFLAGS='-O0 -std=gnu++0x -ggdb -DUSE_MATH=1 -fpermissive -Wno-write-strings')
target = ARGUMENTS.get('TARGET','LINUX')

if target=='LINUX':
   env.Append(LIBS = ['glut', 'GL', 'png', 'lo'])
   env.Append(CCFLAGS=' -DFLX_LINUX')
   env.Append(CPPPATH = '.')

if target=='RPI':
   # raspberry pi
   env.Append(LIBS = ['GLESv1_CM', 'EGL', 'bcm_host', 'X11', 'png', 'lo'])
   env.Append(CCFLAGS=' -DFLX_RPI -fpermissive')
   env.Append(CPPPATH = '/opt/vc/include/interface/vcos/pthreads/:/opt/vc/include/interface/vmcs_host/linux:/opt/vc/include/:.')
   env.Append(LIBPATH = '/opt/vc/lib')

env.Program( target = 'nomadic',
             source = ['main.cpp',
                       'core/fixed.cpp',
                       'core/list.cpp',
                       'core/geometry.cpp',
		               'core/idmap.cpp',
		               'core/noise.cpp',
                       'fluxa/Sample.cpp',
                       'fluxa/Allocator.cpp',
                       'fluxa/Graph.cpp',
	                   'fluxa/GraphNode.cpp',
                       'fluxa/Modules.cpp',
	                   'fluxa/ModuleNodes.cpp',
                       'engine/obj_reader.cpp',
                       'engine/engine.cpp',
                       'engine/primitive.cpp',
                       'engine/text_primitive.cpp',
                       'engine/scenegraph.cpp',
                       'engine/scenenode.cpp',
                       'engine/texture.cpp',
                       'engine/nomadic.cpp',
                       'scheme/scheme.cpp',
                       'jellyfish/jellyfish_primitive.cpp',
                       'jellyfish/jellyfish.cpp'
                       ] )
